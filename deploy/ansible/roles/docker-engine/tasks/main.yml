###############################################
# Install Docker Engine
###############################################
- name: Update APT cache
  apt:
    update_cache: yes

# get a list of packages that have updates
- name: get list of pending upgrades
  command: apt-get --simulate dist-upgrade
  args:
    warn: false # don't warn us about apt having its own plugin
  register: apt_simulate
  changed_when: 0
  when: upgrade_system

# This operation is time consuming, I recommend to do only by configuration parameters
# pick out list of pending updates from command output
- name: parse apt-get output to get list of changed packages
  set_fact:
    updates: '{{ apt_simulate.stdout_lines | select("match", "^Inst ") | list | splitpart(1, " ") | list | sort }}'
  changed_when: 0
  when: upgrade_system

# tell user about packages being updated
- name: show pending updates
  debug:
    var: updates
  when: updates.0 is defined

# do the actual apt-get dist-upgrade
- name: apt-get dist-upgrade
  apt:
    upgrade: dist # upgrade all packages to latest version
  register: upgrade_output
  when: upgrade_system

# check if we need a reboot
- name: check if reboot needed
  stat: path=/var/run/reboot-required
  register: file_reboot_required

- name: reboot node
  shell: sleep 2 && shutdown -r now "Reboot triggered by ansible"
  async: 1
  poll: 0
  ignore_errors: true
  when: file_reboot_required.stat.exists

# poll ssh port until we get a tcp connect
- name: wait for node to finish booting
  become: false
  local_action: wait_for
      host={{ ansible_ssh_host }}
      port=22
      state=started
      delay=5
      timeout=600
  when: file_reboot_required.stat.exists

# give sshd time to start fully
- name: wait for ssh to start fully
  pause:
    seconds: 15
  when: file_reboot_required.stat.exists

- name: Install apt-transport-https, ca-certificates, software-properties-common, jq, curl and ppa-purge
  apt:
    name: ['apt-transport-https', 'ca-certificates', 'software-properties-common', 'jq', 'curl', 'ppa-purge']
    update_cache: yes
    state: present

- name: Download gpg key
  get_url:
    url: https://download.docker.com/linux/ubuntu/gpg
    dest: /home/ubuntu/gpg
    mode: 0440

- name: Add apt key
  command: apt-key add /home/ubuntu/gpg

- name: Apt key fingerprint
  command: apt-key fingerprint 0EBFCD88

- name: Check lsb_release
  command: lsb_release -cs
  register: lsb_rel

- name: Check uname -s
  command: uname -s
  register: uname_s

- name: Check uname -m
  command: uname -m
  register: uname_m

- debug:
    msg: "{{ lsb_rel.stdout }}"

- debug:
    msg: "{{ uname_s.stdout }}"

- debug:
    msg: "{{ uname_m.stdout }}"

- name: Add apt-key repository
  command: add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu "{{ lsb_rel.stdout }}" stable"

- name: Update repositories cache
  apt:
    update_cache: yes

- name: Install docker-ce
  apt:
    name: ['docker-ce']
    update_cache: yes
    state: present

- name: Install docker-compose
  get_url:
    url: https://github.com/docker/compose/releases/download/1.23.2/docker-compose-{{ uname_s.stdout }}-{{ uname_m.stdout }}
    dest: /usr/local/bin/docker-compose
    mode: 0440

# change permission to a file
- name: Changing perm of "/usr/local/bin/docker-compose", adding "+x"
  file: dest=/usr/local/bin/docker-compose mode=a+x

- name: Delete unused files
  file: path=/home/ubuntu/gpg state=absent

- name: Check docker version
  command: docker -v
  register: docker

- name: Check docker-compose version
  command: docker-compose -v
  register: docker_compose

- debug:
    msg: "{{ docker.stdout }}"

- debug:
    msg: "{{ docker_compose.stdout }}"
