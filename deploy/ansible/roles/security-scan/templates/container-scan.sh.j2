#!/bin/bash
# set -xv

user="{{ user }}"
password="{{ password }}"

export DOCKER_CLIENT_TIMEOUT=200
export COMPOSE_HTTP_TIMEOUT=200

function usage() {
    echo "Usage: $0 [-pv] [IMAGE_NAME]"
    echo
    echo "Options:"
    echo " -p : Pull images before running scan"
    echo " -v : verbose output"
    echo
    echo "[IMAGE_NAME] : (Optional) FIWARE GE name to be analysed."
    echo "               It should be present in the enabler.json file."
    echo "               If it is not provided the Docker images are "
    echo "               obtained from the enablers.json file."
    exit 1
}

function redirect_stderr() {
    if [[ ${VERBOSE} -eq 1 ]]; then
        "$@"
    else
        "$@" 2>/dev/null
    fi
}

function redirect_all() {
    if [[ ${VERBOSE} -eq 1 ]]; then
        "$@"
    else
        "$@" 2>/dev/null >/dev/null
    fi
}

function security_analysis() {
    echo
    echo "Clair CVE Security Scan... "

    enabler=$@

    redirect_all echo "Pulling from "$enabler"..."

    # Get the list of docker images from the enabler.json taking into account the FIWARE GE name
    cmd='.enablers[] | select(.name == "'${enabler}'") | .image'
    images=$(jq -r "${cmd}" enablers.json)

    filename_clair=""

    # From the images, we need to iterate for the different values
    for i in ${images//,/ }
    do
        # call your procedure/other scripts here below
        redirect_all echo "$i"

        redirect_all docker pull "$i"
        redirect_all echo

        labels=$(docker inspect --type=image "$i" 2>/dev/null | jq .[].Config.Labels)

        if [[ ${PULL} -eq 1 ]];
        then
          redirect_all echo "Pulling Clair content ..."
          redirect_all docker-compose pull
          redirect_all echo
        fi

        redirect_all echo "Security analysis of "$i" image..."
        extension="$(date +%Y%m%d_%H%M%S)-cve.json"
        # filename=$(echo "$i" | awk -F '/' -v a="$extension" '{print $2 a}')
        # enabler=$(echo "$i" | awk -F '/' '{print $2}')

        # Extract the name of the docker image
        short_name=$(echo $i | awk -F '/' '{print $2}' | awk -F ':' '{print $1}')
        redirect_all echo "$short_name"

        filename=$(echo "$enabler" | awk  -v a="$extension" -v b="$short_name" '{print $0"-"b"-"a}')

        redirect_stderr docker-compose run --rm scanner "$i" > ${filename}
        ret=$?
        redirect_all echo

        # Filtering the line from the result analysis
        line=$(grep 'latest: Pulling from arminc\/clair-db' ${filename})

        # Just for the 1st time...
        if [[ -n ${line} ]]; then
            # Delete first 3 lines of the file due to the first time that it is executed
            # it includes 3 extra no needed lines
            sed -i '1,3 d' ${filename}
        fi

        # Just to finish, send the data to the nexus instance
        redirect_all curl -fsSL -u ${user}':'${password} --upload-file ${filename}  https://nexus.lab.fiware.org/repository/security/check/${enabler}/sast_clair/${filename}

        # Keep the name of the file to send afterward the email to the owner
        filename_clair=$filename_clair$(pwd)"/"$filename","
    done

    # We need to remove the last "," from the filename string(s)
    filename_clair=${filename_clair::-1}
}

function docker_bench_security() {
    echo
    echo "Docker Bench Security Scan... "
    enabler=$@

    cd ./docker-bench-security

    redirect_all echo "Creating an instance of the GE ${enabler}"
    cmd='.enablers[] | select(.name == "'${enabler}'") | .compose'
    compose=$(jq -r "${cmd}" enablers.json)
    redirect_all echo "Compose: $compose"
    redirect_all echo

    mv docker-compose.yml docker-compose.old
    wget -q $compose
    compose=$(echo $compose | awk -F '/' '{print $NF}')

    # Could be possible that they are the same names (e.g. Orion)
    mv $compose docker-compose.yml 2>/dev/null
    redirect_all docker-compose pull
    redirect_all docker-compose up &

    # We need to wait until it is ready the docker-compose service
    sleep 120

    redirect_all ./docker-bench-security.sh  -c container_images,container_runtime,docker_security_operations

    extension="$(date +%Y%m%d_%H%M%S)-bench.json"
    filename="$@-$extension"
    # enabler=$(echo "$@" | awk -F '/' '{print $2}')

    mv docker-bench-security.sh.log.json ${filename}

    # Just to finish, send the data to the nexus instance
    redirect_all curl -fsSL -u ${user}':'${password} --upload-file ${filename}  https://nexus.lab.fiware.org/repository/security/check/${enabler}/bench-security/${filename}

    # Keep the name of the file to send afterward the email to the owner
    filename_bench=$(pwd)"/"$filename

    cd ..
}

function anchore() {
    echo
    echo "Anchore Security Scan... "
    enabler=$@

    redirect_all echo $(pwd)
    cd ./anchore

    filename_anchore=""

    cmd='.enablers[] | select(.name == "'${enabler}'") | .image'
    images=$(jq -r "${cmd}" enablers.json)

    # From the images, we need to iterate for the different values
    for i in ${images//,/ }
    do
        # call your procedure/other scripts here below
        redirect_all echo "$i"

        extension="$(date +%Y%m%d_%H%M%S)-anchore.json"

        # Extract the name of the docker image
        short_name=$(echo $i | awk -F '/' '{print $2}' | awk -F ':' '{print $1}')
        redirect_all echo "$short_name"

        filename=$(echo "$enabler" | awk  -v a="$extension" -v b="$short_name" '{print $0"-"b"-"a}')


        redirect_all docker pull $i

        # Step 4: Add the FIWARE Enabler to be analysed
        redirect_all docker-compose -f docker-compose-anchore.yaml exec api anchore-cli image add $i

        # Step 5: Wait until the analysis is finished (it needs some time)
        redirect_all docker-compose -f docker-compose-anchore.yaml exec api anchore-cli image wait $i

        # Step 6: Get the list of vulnerabilities
        redirect_stderr docker-compose -f docker-compose-anchore.yaml exec api anchore-cli --json image vuln $i all > ${filename}

        # Just to finish, send the data to the nexus instance
        redirect_all curl -fsSL -u ${user}':'${password} --upload-file ${filename}  https://nexus.lab.fiware.org/repository/security/check/${enabler}/sast_anchore/${filename}
        # http -a ${user}:${password} https://nexus.lab.fiware.org/repository/security/check/${enabler}/sast_anchore/${filename} < ${filename}

        # Keep the name of the file to send afterward the email to the owner
        filename_anchore=$filename_anchore$(pwd)"/"$filename","
    done

    # We need to remove the last "," from the filename string(s)
    filename_anchore=${filename_anchore::-1}

    cd ..
}


function clean_docker() {
    # Stop/down the Anchore engine
    echo "Clean up the Anchore docker-compose engine..."
    cd ./anchore
    docker-compose -f docker-compose-anchore.yaml down
    echo

    # Stop/down the Docker-Bench-Analysis engine
    cd ../docker-bench-security
    echo "Clean up the Docker-Bench-Security docker-compose engine..."
    docker-compose down
    echo

    # Stop/down the Clair engine
    cd ..
    echo "Clean up the Clair docker-compose engine..."
    docker-compose down
    echo

    # Clean all docker images
    echo "Clean up all docker images..."
    docker kill $(docker ps --all -q) 2>/dev/null
    docker rm $(docker ps --all -q) 2>/dev/null
    docker rmi $(docker images --all -q)
}


function init() {
    echo
    echo "Initialize the scan..."

    BASEDIR=$(cd $(dirname "$0") && pwd)
    cd "$BASEDIR"

    if [[ ! -f "docker-compose.yml" ]]; then
        wget -q https://raw.githubusercontent.com/flopezag/fiware-security/develop/Common/cve_severity_scan.yml
        mv cve_severity_scan.yml docker-compose.yml
    fi

    # Need to check that the file exist

    if [[ ! -d "docker-bench-security" ]]; then
        redirect_all git clone https://github.com/docker/docker-bench-security.git
    fi

    if [[ ! -d "anchore" ]]; then
        mkdir ./anchore
    fi

    cd anchore

    # Delete tbe current version of the docker-engine of Anchore
    rm docker-compose-anchore.yaml

    # Download the possible new version of the docker-compose.yaml file
    wget -q -O docker-compose-anchore.yaml https://engine.anchore.io/docs/quickstart/docker-compose.yaml

    # Step 1: Start Anchore engine
    redirect_all docker-compose -f docker-compose-anchore.yaml up -d

    # Step 2: Verify service availability

    # Step 3: Wait until the vulnarabilities dictionary is download
    redirect_all docker-compose -f docker-compose-anchore.yaml exec api anchore-cli system wait

    cd ..

    # Need to check that the file exist
    if [[ ! -f "enablers.json" ]]; then
        wget -q https://raw.githubusercontent.com/flopezag/fiware-security/develop/Common/enablers.json
        cp enablers.json ./docker-bench-security/enablers.json
        cp enablers.json ./anchore/enablers.json
    fi

    # Need to check that the file exists

    cd "$BASEDIR"
}


function email() {
  # This function receive 4 parameters
  # FIWARE GE name
  # Result file of the Docker Bench Security Scan
  # Result files of the Clair scan
  # Result files of the Anchore scan
  # Return:
  #             mail \
  #                 -s <subject> \
  #                 -t <destination od the email> \
  #                 -b <content of the message> \
  #                 -a <Clair test report> \
  #                 -a <Anchore test report> \
  #                 -a <Docker Bench Security report>


  enabler_name=$1
  email_owner=$(jq '.enablers[] | select(.name=="Orion") | .email' enablers.json)
  bench_file=$2
  clair_file=$3
  anchore_file=$4



  MESSAGE="Dear FIWARE GE owner,

  As a result of the security analysis working group, we have identified
  a set of possible security issues in your component, based on Clair,
  Anchore and Docker Bench Security Analysis. We recommend that
  you perform a thorough analysis of these results and take appropriate
  actions to resolve the security issues found as soon as possible.

  Thank you in advance for your cooperation...

  Kind Regards,
  Fernando"



  SUBJECT="[Security Analysis] Analysis of docker image: "$enabler_name



  echo "$MESSAGE" > /tmp/tmpfile.$$

  email_command="/home/ubuntu/security-scan/common/mail
                    -s \"$SUBJECT\"
                    -t $email_owner
                    -b /tmp/tmpfile.$$
                    -a $bench_file"

  # From the files associated to clair generate -a <file> for the different values
  for i in ${clair_file//,/ }
  do
    email_command=$email_command"  -a $i"
  done

  # From the files associated to anchore generate -a <file> for the different values
  for i in ${anchore_file//,/ }
  do
    email_command=$email_command"  -a $i"
  done

  echo
  echo ${email_command}
}

function print_result {
  file_clair=$1
  file_bench=$2
  file_anchore=$3

  echo
  echo "CVE Clair vulnerabilities"
  echo
  for a in Unknown Negligible Low Medium High ;
  do
    data=$(more $file_clair | jq ".[].vulnerabilities[].severity | select (.==\"${a}\")" | wc -l)
    echo "    $a  $data"
  done

  TOTAL=$(more $file_clair  | jq '.[].vulnerabilities | length')
  echo "    TOTAL: ${TOTAL}"



  echo
  echo
  echo "CIS Docker Benchmark (security best practices)"
  echo
  for a in "Container Images and Build File" "Container Runtime" "Docker Security Operations";
  do
    echo "    $a"
    for b in PASS INFO NOTE WARN;
    do
      data=$(more $file_bench | jq ".tests[] | select(.desc == \"${a}\") | .results[].result | select (.==\"${b}\")" | wc -l)
      # data=$(more $file_bench | jq ".tests[].results[].result | select (.==\"${b}\")" | wc -l)
      echo "        $b  $data"
    done
  done
  TOTAL=$(more $file_bench  | jq '.tests[].results | length' | awk '{sum+=$1} END{printf("%d\n",sum)}')

  echo
  echo "    TOTAL: ${TOTAL}"
  echo



  echo
  echo
  echo "Anchore Security Analysis"
  echo
  for a in Unknown Negligible Low Medium High Critical;
  do
    data=$(more $file_anchore | jq ".vulnerabilities[].severity | select (.==\"${a}\")" | wc -l)
    echo "    $a  $data"
  done

  TOTAL=$(more $file_anchore  | jq '.vulnerabilities[].severity' | wc -l)
  echo "    TOTAL: ${TOTAL}"
  echo
}

PULL=0
VERBOSE=0

while getopts ":phv" opt; do
    case ${opt} in
        p)
            PULL=1
            ;;
        v)
            VERBOSE=1
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            usage
            ;;
        h)
            usage
            ;;
    esac
done
shift $(($OPTIND -1))

init

if [[ -n $1 ]]; then
    security_analysis "$1"
    docker_bench_security "$1"
    anchore "$1"

    email "$1" ${filename_bench} ${filename_clair} ${filename_anchore}
    eval $email_command
    rm /tmp/tmpfile.$$

    print_result ${filename_clair} ${filename_bench} ${filename_anchore}

    clean_docker
else
    for ge in `more enablers.json | jq .enablers[].name | sed 's/"//g'`
    do
      security_analysis ${ge}
      docker_bench_security ${ge}
      anchore ${ge}
      echo
      echo

      email ${ge} ${filename_bench} ${filename_clair} ${filename_anchore}
      eval $email_command
      rm /tmp/tmpfile.$$

      print_result ${filename_clair} ${filename_bench} ${filename_anchore}
    done

    clean_docker
fi

exit ${ret}
